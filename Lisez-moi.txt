*------------------------------*
| PROJET 2 : README DU RENDU 2 |
*------------------------------*

  ATTENTION A BIEN RELIRE A LA FIN LE README
( AUCUN ELEMENT OUBLIE, FAUTES )
AINSI QU'A SUPPRIMER LES "TODO" AU FUR ET A
MESURE ( Y COMPRIS CELUI CI ! ) 

  Ce fichier presente notre travail sur le deuxieme
rendu du projet 2. Nous y abordons notamment le 
debuggage de DPLL, les fonctionnalites de notre
programme et son utilisation, l'organisation du code,
nos choix d'implementations importants, ainsi que la
repartition du travail et nos apports personnels par 
rapport au sujet brut du rendu.

*-----------------------------------*
I] Ameliorations/Debuggage de DPLL: |
*-----------------------------------*
 
  Un point incontournable de ce rendu 2 etait le 
debuggage de notre ancienne version de DPLL. 
Cependant, nous avons voulu l'effectuer en meme 
temps que d'avancer sur les objectifs du rendu 2.

  Le principal bug a ete trouve en residait en fait
dans un mauvais backtrack. L'ancienne version a ete 
corrige en utilisant la methode suggeree de reprendre
l'exemple ou le bug apparait et de rajouter des clauses
reduites a une seule variable de sorte a "forcer" 
l'algorithme a aller directement vers le dug. Cette 
methode nous a permis de debugger d'une maniere rigoureuse
notre programme ( par opposition a un premier debuggage, qui
partait de l'idee que l'exception declenchee n'etait pas 
une erreur mais une exception non traitee. Ce premier debuggage
donnait des resultats satisfaisant sur les exemples, mais
etait completement faux sur le fond ).

  Comme vous avez pu le voir la semaine derniere sur quelques uns
de vos tests, ce debuggage est concluant (pour l'explication du 
fameux rate.cnf, se referer a la derniere partie )

  Le code en lui meme n'a pas ete ameliore, mais plutot 
reorganise. Les differentes parties de l'algorithme 
( notamment les parties "pari-backtrack.ml" et "main.ml" )
ont ete reorganisees de maniere a ce que le contenu du code
corresponde au nom du fichier.

*-----------------------------*
II] Utilisation du programme  |
*-----------------------------*

a) Description des fonctionnalites

- Transformation de Tseitin : prend un fichier .txt, cree le 
 fichier .cnf correspondant et lance l'algorithme choisi avec 
 ce fichier .cnf
- Heuristiques : nous avons choisi d'implementer les heuristiques
  suivantes : 
  
  1) RAND ;
 
  2) Deux versions de MOMS : la version decrite dans le poly du
  cours : on parie sur la variable qui apparait le plus dans 
  les clauses de taille minimale, et une version modifiee ou la
  notion de taille est a remplacer par le nombre de litteraux qui
  ne sont pas encore a faux dans la clause.
  
    Par exemple, si l'affectation courante est x1 = faux, x3 = vrai,
  la taille de la clause c = x1 \/ not x2 \/ not x3 est 3, tandis
  que la taille "reelle" ( ie celle consideree dans la seconde
  version) de la clause est 1 ( car x1 et not x3 sont a faux).  
 
    La comparaison de ces deux heuristiques sera un point important
  de notre etude.
  
  3) Les deux versions de DLIS decrites dans les transparents.

- La possibilite de tracer des courbes.

b) Comment utiliser le programme

1) Pour compiler, lancer make.

2) L'executable calc est cree.
   On peut l'utiliser avec des options, correspondant aux 
   diffrentes heuristiques et aux transformations de Tseitin.
 - pour utiliser la transformation de Tseitin, rajouter 
   l'option -tseitin, suivi du nom du fichier ou enregistrer 
   le fichier .cnf.
   Exemple : .calc -tseitin formule.txt ex-tseitin.cnf
 - pour utiliser les differentes heuristiques, rajouter l'option
   correspondante, et uniquement l'option.
   1) pour RAND : -rand
   2) pour MOMS version 1 : -moms
                version 2 : -moms2
   3) pour DLIS version 1 : -dlis
                version 2 : -dlis2
 - Il est possible de cumuler Tseitin avec une heuristique, mais
   pas deux heuristiques a la fois.
   Exemples ./calc -moms -tseitin formule.txt toto.cnf
 - Il est egalement possible de lancer l'algorithme DPLL de base,
 pour cela on lancera simplement calc sans options :
  ./calc ex.cnf

*-------------------------------------------------------*
| TODO : Comment generer les courbes/fichiers de tests? |
|        Pourra-t-on faire des options ?                |
*-------------------------------------------------------*

III] Choix d'implementation importants

a) Regles pour parser une formule logiques 

Consulter le fichier Lisez-moi.txt du répertoire Tseitin

b) Dans les heuristiques 

*---------------------------------------------------------*
| TODO 1 : Donner les regles pour parser                  |
|                                                         |
| TODO 2 : Les choix d'implementation pour les differentes|
| heuristiques, normalement pas grand chose a dire.       |
*---------------------------------------------------------*

IV] Organisation du code

Le code est organise comme suit :
- le programme : les noms de fichiers sont explicites :
  "pretraitement.ml"
  "propagation.ml"
  "pari-backtrack.ml"
  "main.ml"
  "tseitin.ml"
  "tests.ml" -> Contient des tests pour verifier la correction
    des programmes, a ne pas confondre avec les moulinettes de
    tests.

*-----------------------------*
| TODO : les autres fichiers  |
*-----------------------------*

V] Repartition du travail

  La separation assez claire entre les differentes parties du rendu
ainsi que les connaissances/affinites de chacun nous ont permis de 
bien nous repartir le travail.

  Nous exposons ici le travail que chacun a apporte de son cote.
Nous tenons egalement a preciser que nous avons beaucoup discute
sur les variantes des heuristiques, la maniere d'effectuer les tests,
ainsi que lors du debuggage ( bien entendu ). Ces discussion furent 
toujours enrichissantes.

*---------------------------------------*
| TODO : verifier/completer cette liste |
*---------------------------------------*

Pour Patrice : 
 - L'implementation des differentes heuristiques ;
 - le deuxieme ( = le bon ) debuggage ;
 - la gestion des options console en ocaml ;
  *----------------------* 
  | TOUJOURS EFFECTIF ?? | 
  *----------------------*
 - la generation du fichier d'exemple via script shell ; 
 - la reorganisation du code, ainsi que l'amelioration de sa 
  lisibilite.

Pour William :
 - La partie sur la transformation de Tseitin : parser, lexer, 
 fonctions pour la transformation de Tseitin, debuggage a l'aide
 de minisat ;
 - Les fonctions de generation de formules aleatoires ;
 - le premier ( = l'incorrect) debuggage ;
 (- les "premisses" des shells; )
 - tentative : la recherche des ratios nombre_de_variables/nombre_de_clauses
 a l'aide de minisat ( voir les remarques pour en fin de fichier 
 pour plus de precisions ).

VI] Autres remarques

  Lors de nos discussions sur les tests, il nous semblait interessant
de trouver un bon ratio entre le nombre de variables et le nombre
de clauses qui permettent d'avoir suffisamment interessants.
Nous avons considere comme interessants des tests ( par tests nous
entendons ensemble de formules a n variables et m clauses, n et m 
fixes ) tels que parmi l'ensemble de formules du test, une certaine
proportion non negligeable etaient insatisfiables.

  A defaut d'avoir un script bash fonctionnel, nous avons pris un ratio 
fixe a 4.2 ( qui semble etre un ratio critique... )

  Concernant le "Parsing.Parse_error" que vous nous avez envoyé la semaine 
derniere, il est assez suprenant. Nous avons copie/colle, dans le fichier
"rate.cnf", un autre exemple de formule qui ne donne pas d'erreur : le fichier
affiche egalement l'erreur !
Nous avons par ailleurs montre avec des print que le parseur ne commence pas, nous
pensons qu'il s'agit d'un caractere "malveillant" en debut de fichier, mais nous 
n'avons actuellement pas trouve de solution.

*-------------------------------*
| TODO : Seuil choisi ? Details | 
*-------------------------------*
