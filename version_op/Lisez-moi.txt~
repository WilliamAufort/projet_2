*------------------------------*
| PROJET 2 : README DU RENDU 2 |
*------------------------------*


  Ce fichier presente notre travail sur le deuxieme
rendu du projet 2. Nous y abordons notamment le 
debuggage de DPLL, les fonctionnalites de notre
programme et son utilisation, l'organisation du code,
nos choix d'implementations importants, ainsi que la
repartition du travail et nos apports personnels par 
rapport au sujet brut du rendu.
Il est complété par un fichier lisez moi tseitin pour la
partie sur tseitin

*-----------------------------------*
I] Ameliorations/Debuggage de DPLL: |
*-----------------------------------*
 
  Un point incontournable de ce rendu 2 etait le 
debuggage de notre ancienne version de DPLL. 
Cependant, nous avons voulu l'effectuer en meme 
temps que d'avancer sur les objectifs du rendu 2.

  Le principal bug a ete trouve en residait en fait
dans un mauvais backtrack et de considérer comme non satisfaites 
des cluases qui l'était. L'ancienne version a été
corrige en utilisant la methode suggerée de reprendre
l'exemple ou le bug apparait et de rajouter des clauses
réduites a une seule variable de sorte à "forcer" 
l'algorithme à aller directement vers le dug. Cette 
méthode nous a permis de debugger d'une manière rigoureuse
notre programme ( par opposition a un premier debuggage, qui
partait de l'idée que l'exception declenchee n'etait pas 
une erreur mais une exception non traitee. Ce premier débuggage
donnait des resultats satisfaisant sur certains exemples, mais
était completement faux sur le fond ).

  Le code en lui meme n'a pas ete amélioré, mais plutot 
réorganisé. Les differentes parties de l'algorithme 
( notamment les parties "pari-backtrack.ml" et "main.ml" 
ont ete reorganisees de maniere a ce que le contenu du code
corresponde au nom du fichier.

*-----------------------------*
II] Utilisation du programme  |
*-----------------------------*

a) Description des fonctionnalites

- Transformation de Tseitin : prend un fichier .txt, cree le 
 fichier .cnf correspondant et lance l'algorithme choisi avec 
 ce fichier .cnf
- Heuristiques : nous avons choisi d'implementer les heuristiques
  suivantes : 
  
  1) RAND ;
 
  2) Deux versions de MOMS : la version decrite dans le poly du
  cours : on parie sur la variable qui apparait le plus dans 
  les clauses de taille minimale, et une version modifiee ou la
  notion de taille est a remplacer par le nombre de litteraux qui
  ne sont pas encore a faux dans la clause.
  
    Par exemple, si l'affectation courante est x1 = faux, x3 = vrai,
  la taille de la clause c = x1 \/ not x2 \/ not x3 est 3, tandis
  que la taille "reelle" ( ie celle consideree dans la seconde
  version) de la clause est 1 ( car x1 et not x3 sont a faux).  
 
    La comparaison de ces deux heuristiques sera un point important
  de notre etude.
  
  3) La version de DLIS simple.

- La possibilite de tracer des courbes.

b) Comment utiliser le programme

1) Pour compiler, lancer make.

2) L'executable resol est cree.
   On peut l'utiliser avec des options, correspondant aux 
   diffrentes heuristiques et aux transformations de Tseitin.
 - pour utiliser la transformation de Tseitin, rajouter 
   l'option -tseitin. Le fichier crée est enregistré dans 
   ex-tseitin.cnf 
   Exemple : ./resol -tseitin formule.txt
 - pour utiliser les differentes heuristiques, rajouter l'option
   correspondante, et uniquement l'option.
   1) pour RAND : -rand
   2) pour MOMS version 1 : -moms
                version 2 : -moms2
   3) pour DLIS : -dlis
 - Il est possible de cumuler Tseitin avec une heuristique, mais
   pas deux heuristiques a la fois.L'ordre ne compte pas
   Exemples ./resol -moms -tseitin formule.txt toto.cnf
 - Il est egalement possible de lancer l'algorithme DPLL de base,
 pour cela on lancera simplement resol sans options :
  ./resol ex.cnf


*-------------------------------------*
III] Choix d'implementation importants|
*-------------------------------------*

On a implémenté les trois heuritiques rand moms et dlis et une amélioration de moms prenant en 
compte les variables fausses dans la clause. Pour moms on calcule la liste des clauses de taille minimal


*-----------------------*
IV] Organisation du code|
*-----------------------*

Le code est organise comme suit :
- le programme : les noms de fichiers sont explicites :
  "pretraitement.ml"
  "propagation.ml"
  "pari-backtrack.ml"
  "main.ml"
  "appel_tseitin.ml"
  "
  "tests.ml" -> Contient des tests pour verifier la correction
    des programmes, a ne pas confondre avec les moulinettes de
    tests.
*------------------------*
V] Repartition du travail|
*------------------------*

  La separation assez claire entre les differentes parties du rendu
ainsi que les connaissances/affinites de chacun nous ont permis de 
bien nous repartir le travail.

  Nous exposons ici le travail que chacun a apporte de son cote.
Nous tenons egalement a preciser que nous avons beaucoup discute
sur les variantes des heuristiques, la maniere d'effectuer les tests,
ainsi que lors du debuggage ( bien entendu ). Ces discussion furent 
toujours enrichissantes.



Pour Patrice : 
 - L'implementation des differentes heuristiques ;
 - le deuxieme ( = le bon ) debuggage ;
 - la gestion des options console en ocaml ;
 - la generation du fichier d'exemple via script shell ;
 - la reorganisation du code, ainsi que l'amelioration de sa 
  lisibilite.

Pour William :
 - La partie sur la transformation de Tseitin : parser, lexer, 
 fonctions pour la transformation de Tseitin, debuggage a l'aide
 de minisat ;
 - Les fonctions de generation de formules aleatoires ;
 - le premier ( = l'incorrect) debuggage ;
 (- les "premisses" des shells; )
 - la redaction d'une part importante du present README.

