type token =
  | INT of (int)
  | P
  | C
  | N
  | F
  | MOINS
  | EOF
  | ZERO
  | EOL
  | TRUC

open Parsing;;
# 2 "parser.mly"
(* --- préambule: ici du code Caml --- *)

open Types 


 (* rappel : dans types.ml, type entree = int list *)

# 23 "parser.ml"
let yytransl_const = [|
  258 (* P *);
  259 (* C *);
  260 (* N *);
  261 (* F *);
  262 (* MOINS *);
    0 (* EOF *);
  263 (* ZERO *);
  264 (* EOL *);
  265 (* TRUC *);
    0|]

let yytransl_block = [|
  257 (* INT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\003\000\003\000\
\003\000\003\000\000\000"

let yylen = "\002\000\
\010\000\001\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\001\000\002\000\003\000\
\002\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\019\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
\000\000\018\000\001\000\000\000\000\000\017\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\014\000\000\000\005\000\
\000\000\015\000\003\000\004\000\012\000\007\000\006\000\008\000\
\009\000\010\000\011\000\013\000\016\000"

let yydgoto = "\002\000\
\004\000\019\000\020\000\021\000\032\000"

let yysindex = "\020\000\
\019\255\000\000\020\255\000\000\027\255\028\255\026\255\029\255\
\031\255\032\255\030\255\001\000\017\255\001\255\034\255\000\000\
\033\255\000\000\000\000\001\000\001\000\000\000\001\255\001\255\
\001\255\001\255\001\255\001\255\001\255\000\000\001\255\000\000\
\017\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\006\000\243\255\000\000\244\255"

let yytablesize = 265
let yytable = "\022\000\
\016\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\
\030\000\031\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\013\000\044\000\045\000\001\000\003\000\015\000\017\000\
\018\000\035\000\036\000\005\000\006\000\008\000\007\000\010\000\
\011\000\009\000\033\000\000\000\000\000\012\000\000\000\000\000\
\034\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\013\000\000\000\014\000\000\000\000\000\015\000\017\000\
\018\000"

let yycheck = "\013\000\
\000\000\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\023\000\024\000\025\000\026\000\027\000\028\000\
\029\000\001\001\031\000\033\000\001\000\003\001\006\001\007\001\
\008\001\020\000\021\000\008\001\002\001\004\001\003\001\001\001\
\001\001\005\001\001\001\255\255\255\255\008\001\255\255\255\255\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\255\255\003\001\255\255\255\255\006\001\007\001\
\008\001"

let yynames_const = "\
  P\000\
  C\000\
  N\000\
  F\000\
  MOINS\000\
  EOF\000\
  ZERO\000\
  EOL\000\
  TRUC\000\
  "

let yynames_block = "\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _7 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'liste) in
    Obj.repr(
# 28 "parser.mly"
                                   ( _7::_8::_10 )
# 178 "parser.ml"
               : Types.entree))
; (fun __caml_parser_env ->
    Obj.repr(
# 32 "parser.mly"
         ( [] )
# 184 "parser.ml"
               : 'liste))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'clause) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'liste) in
    Obj.repr(
# 33 "parser.mly"
                  ( _1@_2 )
# 192 "parser.ml"
               : 'liste))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'commentaire) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'liste) in
    Obj.repr(
# 34 "parser.mly"
                       (_2)
# 200 "parser.ml"
               : 'liste))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'texte) in
    Obj.repr(
# 40 "parser.mly"
             ( _2 )
# 207 "parser.ml"
               : 'commentaire))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'texte) in
    Obj.repr(
# 43 "parser.mly"
             ( _2 )
# 214 "parser.ml"
               : 'texte))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'texte) in
    Obj.repr(
# 44 "parser.mly"
             ( _2 )
# 221 "parser.ml"
               : 'texte))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'texte) in
    Obj.repr(
# 45 "parser.mly"
             ( _2 )
# 228 "parser.ml"
               : 'texte))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'texte) in
    Obj.repr(
# 46 "parser.mly"
             ( _2 )
# 235 "parser.ml"
               : 'texte))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'texte) in
    Obj.repr(
# 47 "parser.mly"
                 ( _2 )
# 242 "parser.ml"
               : 'texte))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'texte) in
    Obj.repr(
# 48 "parser.mly"
                ( _2 )
# 249 "parser.ml"
               : 'texte))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'texte) in
    Obj.repr(
# 49 "parser.mly"
               ( _2 )
# 257 "parser.ml"
               : 'texte))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'texte) in
    Obj.repr(
# 50 "parser.mly"
                ( _2 )
# 264 "parser.ml"
               : 'texte))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "parser.mly"
         ( [] )
# 270 "parser.ml"
               : 'texte))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
             ( [0] )
# 276 "parser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'clause) in
    Obj.repr(
# 56 "parser.mly"
                     ( (-_2)::_3 )
# 284 "parser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'clause) in
    Obj.repr(
# 57 "parser.mly"
                     (  _1::_2 )
# 292 "parser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
        ( [] )
# 298 "parser.ml"
               : 'clause))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Types.entree)
