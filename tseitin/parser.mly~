%{
(* --- préambule: ici du code Caml --- *)

open Expr   (* rappel: dans expr.ml: 
             type formule = Var of int | And/Or/Implies of formule*formule | Not of formule *)

%}
/* description des lexèmes */

%token <int> VAR      /* le lexème INT a un attribut entier */
%token AND OR IMPLIES NOT
%token LPAREN RPAREN
%token EOF           /* fin du fichier */

%left IMPLIES              /* associativité gauche, précédence minimale */
%left AND                  /* associativité gauche, précédence moyenne */
%left OR                   /* associativité gauche, précédence forte */
%nonassoc NOT              /* pas d'associativité, précédence maximale */


%start main             /* "start" signale le point d'entrée: c'est ici main */
%type <Expr.formule> main     /* on _doit_ donner le type du point d'entrée */

%%
    /* --- début des règles de grammaire --- */

main:                       /* le point d'entrée */
    form EOF                { $1 }  /* on veut reconnaître une expression */
;
form:			    /* règles de grammaire pour les expressions */
  | VAR                  { Var $1 }
  | LPAREN form RPAREN   { $2 } 
  | form AND form        { And($1,$3) }
  | form OR form         { Or($1,$3) }
  | form IMPLIES form    { Implies($1,$3) }
  | NOT form             { Not($2)}
;

